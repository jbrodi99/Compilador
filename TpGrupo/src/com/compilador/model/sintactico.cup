package com.compilador.model;

import com.compilador.controller.lexico.TablaSimbolos;
import java.io.IOException;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

parser code
{:
    /*Mensaje de error*/
    public void syntax_error(Symbol s) {
      System.out.println("Error de sintaxis en linea " + s.right +
      ". Simbolo: " + s.value);
    }

    public boolean readTable(TablaSimbolos ts){
        try {
            ts.leerArchivo();  // Esto carga los símbolos existentes en la tabla
            return true;
        } catch (IOException e) {
            System.out.println("Error al leer el archivo de símbolos: " + e.getMessage());
            return false;
        }
    }

    public void AddTypesTS(TablaSimbolos ts, List<String> tokenName, List<String> type){
        boolean err = false;
        for(int i = 0; i < tokenName.size(); i++){
            if(!ts.actualizarSimbolo(tokenName.get(i), type.get(i))){
                System.out.println("Error de actualizacion en la tabla de simbolos");
                err = true;
            }
        }
        ts.escribirArchivo(ts.getSymtabla(), false);
        if(!err) System.out.println("Actualizacion en la tabla de simbolos Correcta");
    }
:}
action code
{:
    // Tabla de simbolos del compilador
    TablaSimbolos tabla = new TablaSimbolos("ts.txt");
    // Lista que va a almacenar todos los ids que se declaren en la seccion de declaracion
    List<String> listIDs = new ArrayList<>();
    // Lista que va a almacenar los ids de cada linea de la seccion de declaracion
    // Se va a limpiar cada vez que termine la declaracion
    List<String> invertList = new ArrayList<>();
    // Lista que va a almacenar los tipos de cada linea de la seccion de declaracion
    List<String> listTypes = new ArrayList();
:}

/* Declaracion de Terminales*/
terminal OP_WHILE, OP_IF, OP_ELSE, OP_WRITE, OP_DECSEC, OP_ENDECSEC,
OP_PROSEC, OP_ENDPROSEC, OP_BETWEEN, OP_INT, OP_FLOAT, OP_STRING, OP_SUM,
OP_LESS, OP_MUL, OP_DIV, ASIGN, DECLA, PAR_OP, PAR_CL, SQR_OP,  SQR_CL,
BRA_OP, BRA_CL, DOTCOM, COMA, MINUS, MINUS_EQ, MAY,
MAY_EQ, EQ, NEQ, NOT, AND, OR, ID, CTE_INT, CTE_REAL, CTE_STR, CTE_BIN;

/*Declaracion de no TERMINALES*/
non terminal pgr, declaraciones, programa, sentencias_print, lista_print, print, declare, variable_tipos, tipos, lista,
sentencia, asignacion, while, if, write, between, expresion, condicion, else, cte, termino, factor, comparacion,
condicion_logica;

start with pgr;

/*
    Regla 0 Sector de declaraciones y sector de programa y
    Regla 1 Lista de prints sin ningún sector
*/
pgr ::= declaraciones programa
            {:
                System.out.println("[Regla 0] Compilacion exitosa llegando al simbolo Start: Se detectaron declaraciones y programa.");
                // Se lee la tabla que se creo en la seccion lexica del compilador
                if(readTable(tabla)){
                    // Se le agregan los tipos que se leyeron a todos los ids
                    AddTypesTS(tabla, listIDs, listTypes);
                }
            :}
        | sentencias_print
            {: System.out.println("[Regla 1] Compilacion exitosa llegando al simbolo Start: Se detectaron solo sentencias de impresión."); :};

/*
    Regla 2 Sentencias de prints
*/
sentencias_print ::= lista_print {: System.out.println("[Regla 2] Sector sentencias para imprimir detectado"); :};

/*
    Regla 3 Lista de prints;
    Regla 4 Print;
*/
lista_print ::= lista_print print DOTCOM {::}
                | print DOTCOM {::};

/*
    Regla 5 WRITE "STRING"
*/
print ::= OP_WRITE CTE_STR:str {: System.out.println("[Regla 5] PRINT encontrado: " + str); RESULT = str; :};

/*
    Regla 6 Sector de declaracion
    DECLARE.SECTION
        Declaraciones
    ENDDECLARE.SECTION
*/
declaraciones ::= OP_DECSEC declare OP_ENDECSEC {: System.out.println("[Regla 6] Sector DECLARACION detectado"); :};

/*
    Regla 7 Lista de declaraciones
        []:=[];
        []:=[];
        []:=[];
    Regla 8 Declaracion
        []:=[];
*/
declare ::= declare SQR_OP variable_tipos SQR_CL DOTCOM {:
                // Se invierte la lista auxiliar con los ids actuales
                Collections.reverse(invertList);
                // Se concatena la lista auxiliar a la lista donde se van a almacenar todos los ids
                listIDs.addAll(invertList);
                // Se vacia la lista auxiliar para volver a empezar si hay otra sentencia de declaracion
                invertList.clear();
            :}
            | SQR_OP variable_tipos SQR_CL DOTCOM {:
                // Se invierte la lista auxiliar con los ids actuales
                Collections.reverse(invertList);
                // Se concatena la lista auxiliar a la lista donde se van a almacenar todos los ids
                listIDs.addAll(invertList);
                // Se vacia la lista auxiliar para volver a empezar si hay otra sentencia de declaracion
                invertList.clear();
            :};

/*
    Regla 9 Multiples ID y TIPOS
        ID, ID, ... , TIPO, TIPO
    Regla 10 Cierre de declaracion
        ID] := [TIPO
*/
variable_tipos ::= ID:id COMA variable_tipos COMA tipos:t
                {:
                    System.out.println("[Regla 9] ID encontrado: " + id);
                    RESULT = id;
                    // Se agrega el id encontrado en la lista auxiliar de ids
                    invertList.add(id.toString());
                    // Se agrega el tipo encontrado en la lista de tipos
                    listTypes.add(t.toString());
                :}
                | ID:id SQR_CL DECLA SQR_OP tipos:t
                {:
                    System.out.println("[Regla 10] ID encontrado: " + id);
                    RESULT = id;
                    // Se agrega el id encontrado en la lista auxiliar de ids
                    invertList.add(id.toString());
                    // Se agrega el tipo encontrado en la lista de tipos
                    listTypes.add(t.toString());
                :};

/*
    Regla 11 TIPO ENTERO
    Regla 12 TIPO FLOAT
    Regla 13 TIPO STRING
*/
tipos ::= OP_INT:oint {: System.out.println("[Regla 11] Tipo INT encontrado: " + oint); RESULT = oint; :}
          | OP_FLOAT:ofloat {: System.out.println("[Regla 12] Tipo FLOAT encontrado: " + ofloat); RESULT = ofloat; :}
          | OP_STRING:str {: System.out.println("[Regla 13] Tipo STR encontrado: " + str); RESULT = str; :};

/*
    Regla 14 Sector de Programa
    PROGRAM.SECTION
        Sentencias
    ENDPROGRAM.SECTION
*/
programa ::= OP_PROSEC lista OP_ENDPROSEC {: System.out.println("[Regla 14] Sector PROGRAMA detectado"); :};

/*
    Regla 15 Lista de sentencias
        Sentencia 1
        Sentencia 2
        Sentencia n
    Regla 16 Sentencia Final
*/
lista ::= lista sentencia {::}
            | sentencia {::};

/*
    Regla 17 Sentencia ASIGNACION
    Regla 18 Sentencia WHILE
    Regla 19 Sentencia IF
    Regla 20 Sentencia WRITE
    Regla 21 Sentencia BETWEEN
*/
sentencia ::= asignacion {: System.out.println("[Regla 17] Sentencia ASIGNACION detectada"); :}
                | while {: System.out.println("[Regla 18] Sentencia WHILE detectada"); :}
                | if {: System.out.println("[Regla 19] Sentencia IF detectada"); :}
                | write {: System.out.println("[Regla 20] Sentencia WRITE detectada"); :}
                | between {: System.out.println("[Regla 21] Sentencia BETWEEN detectada"); :};

/*
    Regla 22 Asignacion
        ID ::= expresion;
*/
asignacion ::= ID:id ASIGN expresion DOTCOM {: System.out.println("[Regla 22] ID en asignacion: " + id); RESULT = id; :}
               | ID:id ASIGN CTE_STR:str DOTCOM {: System.out.println("[Regla 23] ID en asignacion: " + id + " = " + str); RESULT = id; :};

/*
    Regla 23 While
        While( Condicion ){ Sentencias }
*/
while ::= OP_WHILE PAR_OP condicion PAR_CL BRA_OP lista BRA_CL {::};

/*
    Regla 24 IF ELSE
        if( Condicion ) { Sentencias }
        else { Sentencias }
    Regla 25 IF
        if( Condicion ) { Sentencias }
*/
if ::= OP_IF PAR_OP condicion PAR_CL BRA_OP lista BRA_CL else {::}
       | OP_IF PAR_OP condicion PAR_CL BRA_OP lista BRA_CL {::};

/*
    Regla 26 ELSE
        else { Sentencias }
    Regla 27 ELSE IF
        else if ( Condicion ) { Sentencias }
*/
else ::= OP_ELSE BRA_OP lista BRA_CL {: System.out.println("[Regla 27] Sentencia ELSE detectada"); :}
        | OP_ELSE if {: System.out.println("[Regla 28] Sentencia ELSE IF detectada"); :} ;

/*
    Regla 28 WRITE
        WRITE Constante;
*/
write ::= OP_WRITE cte DOTCOM {::};

/*
    Regla 29 BETWEEN
        BETWEEN (Expresion, [Expresion; Expresion]);
*/
between ::= OP_BETWEEN PAR_OP expresion COMA SQR_OP expresion DOTCOM expresion SQR_CL PAR_CL DOTCOM
            {::};

/*
Constante puede ser:
    Regla 30 CONSTANTE ENTERA
    Regla 31 CONSTANTE REAL
    Regla 32 CONSTANTE STRING
    Regla 33 CONSTANTE BINARIA
*/
cte ::= CTE_INT:cint {: System.out.println("[Regla 31] Constante INT encontrada: " + cint); RESULT = cint; :}
        | CTE_REAL:real {: System.out.println("[Regla 32] Constante REAL encontrada: " + real); RESULT = real; :}
        | CTE_STR:str {: System.out.println("[Regla 33] Constante STR encontrada: " + str); RESULT = str; :}
        | CTE_BIN:bin {: System.out.println("[Regla 34] Constante BINARIA encontrada: " + bin); RESULT = bin; :};

/*
Expresion puede ser:
    Regla 34 EXPRESION + TERMINO
    Regla 35 EXPRESION - TERMINO
    Regla 36 TERMINO
*/
expresion ::= expresion OP_SUM termino {: System.out.println("[Regla 35] EXPRESION + TERMINO"); :}
                | expresion OP_LESS termino {: System.out.println("[Regla 36] EXPRESION - TERMINO"); :}
                | termino {::};

/*
Termino puede ser:
    Regla 37 TERMINO * FACTOR
    Regla 38 TERMINO / FACTOR
    Regla 39 FACTOR
*/
termino ::= termino OP_MUL factor {: System.out.println("[Regla 38] TERMINO * FACTOR"); :}
            | termino OP_DIV factor {: System.out.println("[Regla 39] TERMINO / FACTOR"); :}
            | factor {::};

/*
Factor puede ser:
    Regla 40 (Expresion)
    Regla 41 CONSTANTE BINARIA
    Regla 42 CONSTANTE ENTERA
    Regla 43 CONSTANTE REAL
    Regla 44 ID
*/
factor ::= PAR_OP expresion PAR_CL {: System.out.println("[Regla 41] FACTOR "); :}
            | CTE_BIN:bin {: System.out.println("[Regla 42] CTE BIN encontrada: " + bin); RESULT = bin; :}
            | CTE_INT:cint {: System.out.println("[Regla 43] CTE INT encontrada: " + cint); RESULT = cint; :}
            | CTE_REAL:real {: System.out.println("[Regla 44] CTE REAL encontrada: " + real); RESULT = real; :}
            | ID:id {: System.out.println("[Regla 45] ID encontrado: " + id); RESULT = id; :};

/*
Condicion logica puede ser:
    Regla 45 EXPRESION Comparador_Logico EXPRESION
*/
condicion_logica ::= expresion comparacion expresion {::};

/*
Condicion puede ser:
    Regla 46 ( Condicion_logica ) && ( Condicion_logica )
    Regla 47 ( Condicion_logica ) || ( Condicion_logica )
    Regla 48 ( Condicion_logica )
    Regla 49 BETWEEN
*/
condicion ::= PAR_OP condicion_logica PAR_CL AND PAR_OP condicion_logica PAR_CL
                    {: System.out.println("[Regla 47] CONDICION AND detectada"); :}
              | PAR_OP condicion_logica PAR_CL OR PAR_OP condicion_logica PAR_CL
                    {: System.out.println("[Regla 48] CONDICION OR detectada"); :}
              | condicion_logica {: System.out.println("[Regla 49] CONDICION LOGICA detectada"); :}
              | NOT condicion {: System.out.println("[Regla 50] CONDICION NEGADA detectada"); :}
              | between {: System.out.println("[Regla 51] CONDICION BETWEEN detectada"); :};

/*
Simbolos de comparacion:
    Regla 50 ==
    Regla 51 !=
    Regla 52 <
    Regla 53 >
    Regla 54 <=
    Regla 55 >=
*/
comparacion ::= EQ:eq {: System.out.println("[Regla 52] Comparador IGUAL encontrado: " + eq); RESULT = eq; :}
                | NEQ:neq {: System.out.println("[Regla 53] Comparador NO IGUAL encontrado: " + neq); RESULT = neq; :}
                | MINUS:minus {: System.out.println("[Regla 54] Comparador MENOR QUE encontrado: " + minus); RESULT = minus; :}
                | MAY:may {: System.out.println("[Regla 55] Comparador MAYOR QUE encontrado: " + may); RESULT = may; :}
                | MINUS_EQ:minus_eq {: System.out.println("[Regla 56] Comparador MENOR O IGUAL encontrado: " + minus_eq); RESULT = minus_eq; :}
                | MAY_EQ:may_eq {: System.out.println("[Regla 57] Comparador MAYOR O IGUAL encontrado: " + may_eq); RESULT = may_eq; :};