
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compilador.model;

import com.compilador.controller.lexico.TablaSimbolos;
import java.io.IOException;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\003\000\002\006\005\000\002\006\004" +
    "\000\002\007\004\000\002\003\005\000\002\010\007\000" +
    "\002\010\006\000\002\011\007\000\002\011\007\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\004" +
    "\005\000\002\013\004\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\006\000\002\016\011\000\002" +
    "\017\012\000\002\017\011\000\002\024\006\000\002\024" +
    "\004\000\002\020\007\000\002\021\015\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\027" +
    "\005\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\031\005\000\002\023\011\000" +
    "\002\023\011\000\002\023\003\000\002\023\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\006\007\011\010\005\001\002\000\004\012" +
    "\047\001\002\000\004\030\021\001\002\000\004\034\017" +
    "\001\002\000\004\002\016\001\002\000\004\002\uffff\001" +
    "\002\000\004\052\015\001\002\000\006\002\ufffe\007\011" +
    "\001\002\000\004\034\014\001\002\000\006\002\ufffd\007" +
    "\ufffd\001\002\000\004\034\ufffb\001\002\000\004\002\001" +
    "\001\002\000\006\002\ufffc\007\ufffc\001\002\000\006\011" +
    "\041\030\042\001\002\000\004\047\022\001\002\000\006" +
    "\031\027\035\026\001\002\000\004\031\024\001\002\000" +
    "\004\034\025\001\002\000\006\011\ufff8\030\ufff8\001\002" +
    "\000\004\047\022\001\002\000\004\025\030\001\002\000" +
    "\004\030\031\001\002\000\010\015\034\016\032\017\035" +
    "\001\002\000\006\031\ufff4\035\ufff4\001\002\000\006\031" +
    "\ufff6\035\ufff6\001\002\000\006\031\ufff5\035\ufff5\001\002" +
    "\000\006\031\ufff3\035\ufff3\001\002\000\004\035\037\001" +
    "\002\000\010\015\034\016\032\017\035\001\002\000\006" +
    "\031\ufff7\035\ufff7\001\002\000\004\012\ufffa\001\002\000" +
    "\004\047\022\001\002\000\004\031\044\001\002\000\004" +
    "\034\045\001\002\000\006\011\ufff9\030\ufff9\001\002\000" +
    "\004\002\000\001\002\000\014\004\054\005\056\007\050" +
    "\014\055\047\060\001\002\000\004\026\175\001\002\000" +
    "\020\004\uffed\005\uffed\007\uffed\013\uffed\014\uffed\033\uffed" +
    "\047\uffed\001\002\000\020\004\ufff0\005\ufff0\007\ufff0\013" +
    "\ufff0\014\ufff0\033\ufff0\047\ufff0\001\002\000\020\004\uffee" +
    "\005\uffee\007\uffee\013\uffee\014\uffee\033\uffee\047\uffee\001" +
    "\002\000\004\026\167\001\002\000\004\026\155\001\002" +
    "\000\004\026\112\001\002\000\020\004\uffef\005\uffef\007" +
    "\uffef\013\uffef\014\uffef\033\uffef\047\uffef\001\002\000\004" +
    "\024\066\001\002\000\016\004\054\005\056\007\050\013" +
    "\065\014\055\047\060\001\002\000\020\004\uffeb\005\uffeb" +
    "\007\uffeb\013\uffeb\014\uffeb\033\uffeb\047\uffeb\001\002\000" +
    "\020\004\uffec\005\uffec\007\uffec\013\uffec\014\uffec\033\uffec" +
    "\047\uffec\001\002\000\020\004\ufff1\005\ufff1\007\ufff1\013" +
    "\ufff1\014\ufff1\033\ufff1\047\ufff1\001\002\000\004\002\ufff2" +
    "\001\002\000\014\026\073\047\067\050\070\051\071\053" +
    "\074\001\002\000\036\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\027\uffd4\031\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\001\002\000\036\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\027\uffd6\031\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\001\002\000\036\020\uffd5\021\uffd5\022\uffd5\023\uffd5\027" +
    "\uffd5\031\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\001\002\000\036\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\027\uffd9\031\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\001" +
    "\002\000\014\026\073\047\067\050\070\051\071\053\074" +
    "\001\002\000\036\020\uffd7\021\uffd7\022\uffd7\023\uffd7\027" +
    "\uffd7\031\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\001\002\000\010\020\105\021" +
    "\103\034\104\001\002\000\036\020\uffdc\021\uffdc\022\077" +
    "\023\100\027\uffdc\031\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\001\002\000\014" +
    "\026\073\047\067\050\070\051\071\053\074\001\002\000" +
    "\014\026\073\047\067\050\070\051\071\053\074\001\002" +
    "\000\036\020\uffda\021\uffda\022\uffda\023\uffda\027\uffda\031" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\001\002\000\036\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\027\uffdb\031\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\001\002\000" +
    "\014\026\073\047\067\050\070\051\071\053\074\001\002" +
    "\000\020\004\uffea\005\uffea\007\uffea\013\uffea\014\uffea\033" +
    "\uffea\047\uffea\001\002\000\014\026\073\047\067\050\070" +
    "\051\071\053\074\001\002\000\036\020\uffde\021\uffde\022" +
    "\077\023\100\027\uffde\031\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\001\002\000" +
    "\036\020\uffdd\021\uffdd\022\077\023\100\027\uffdd\031\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\001\002\000\010\020\105\021\103\027\111" +
    "\001\002\000\036\020\uffd8\021\uffd8\022\uffd8\023\uffd8\027" +
    "\uffd8\031\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\001\002\000\016\014\055\026" +
    "\113\047\067\050\070\051\071\053\074\001\002\000\014" +
    "\026\073\047\067\050\070\051\071\053\074\001\002\000" +
    "\022\020\105\021\103\036\132\037\137\040\133\041\140" +
    "\042\136\043\135\001\002\000\004\027\120\001\002\000" +
    "\004\027\uffd0\001\002\000\004\027\uffcf\001\002\000\004" +
    "\032\121\001\002\000\014\004\054\005\056\007\050\014" +
    "\055\047\060\001\002\000\016\004\054\005\056\007\050" +
    "\014\055\033\123\047\060\001\002\000\022\004\uffe7\005" +
    "\uffe7\006\124\007\uffe7\013\uffe7\014\uffe7\033\uffe7\047\uffe7" +
    "\001\002\000\006\005\056\032\126\001\002\000\020\004" +
    "\uffe8\005\uffe8\007\uffe8\013\uffe8\014\uffe8\033\uffe8\047\uffe8" +
    "\001\002\000\014\004\054\005\056\007\050\014\055\047" +
    "\060\001\002\000\020\004\uffe5\005\uffe5\007\uffe5\013\uffe5" +
    "\014\uffe5\033\uffe5\047\uffe5\001\002\000\016\004\054\005" +
    "\056\007\050\014\055\033\131\047\060\001\002\000\020" +
    "\004\uffe6\005\uffe6\007\uffe6\013\uffe6\014\uffe6\033\uffe6\047" +
    "\uffe6\001\002\000\014\026\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\053\uffcc\001\002\000\014\026\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\053\uffcb\001\002\000\014\026\073\047\067\050\070" +
    "\051\071\053\074\001\002\000\014\026\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\053\uffcd\001\002\000\014\026\uffce\047\uffce" +
    "\050\uffce\051\uffce\053\uffce\001\002\000\014\026\uffca\047" +
    "\uffca\050\uffca\051\uffca\053\uffca\001\002\000\014\026\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\053\uffc9\001\002\000\010\020" +
    "\105\021\103\027\uffd3\001\002\000\024\020\105\021\103" +
    "\027\111\036\132\037\137\040\133\041\140\042\136\043" +
    "\135\001\002\000\004\027\144\001\002\000\006\045\145" +
    "\046\146\001\002\000\004\026\152\001\002\000\004\026" +
    "\147\001\002\000\014\026\073\047\067\050\070\051\071" +
    "\053\074\001\002\000\004\027\151\001\002\000\004\027" +
    "\uffd1\001\002\000\014\026\073\047\067\050\070\051\071" +
    "\053\074\001\002\000\004\027\154\001\002\000\004\027" +
    "\uffd2\001\002\000\014\026\073\047\067\050\070\051\071" +
    "\053\074\001\002\000\010\020\105\021\103\035\157\001" +
    "\002\000\004\030\160\001\002\000\014\026\073\047\067" +
    "\050\070\051\071\053\074\001\002\000\010\020\105\021" +
    "\103\034\162\001\002\000\014\026\073\047\067\050\070" +
    "\051\071\053\074\001\002\000\010\020\105\021\103\031" +
    "\164\001\002\000\004\027\165\001\002\000\004\034\166" +
    "\001\002\000\022\004\uffe3\005\uffe3\007\uffe3\013\uffe3\014" +
    "\uffe3\027\uffe3\033\uffe3\047\uffe3\001\002\000\016\014\055" +
    "\026\113\047\067\050\070\051\071\053\074\001\002\000" +
    "\004\027\171\001\002\000\004\032\172\001\002\000\014" +
    "\004\054\005\056\007\050\014\055\047\060\001\002\000" +
    "\016\004\054\005\056\007\050\014\055\033\174\047\060" +
    "\001\002\000\020\004\uffe9\005\uffe9\007\uffe9\013\uffe9\014" +
    "\uffe9\033\uffe9\047\uffe9\001\002\000\012\050\176\051\177" +
    "\052\202\053\200\001\002\000\004\027\uffe2\001\002\000" +
    "\004\027\uffe1\001\002\000\004\027\uffdf\001\002\000\004" +
    "\027\203\001\002\000\004\027\uffe0\001\002\000\004\034" +
    "\204\001\002\000\020\004\uffe4\005\uffe4\007\uffe4\013\uffe4" +
    "\014\uffe4\033\uffe4\047\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\014\002\006\003\003\005\007\006\011\007" +
    "\005\001\001\000\004\004\045\001\001\000\004\010\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\060\014\051\015\056\016\052" +
    "\017\050\020\062\021\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\063\015\056\016\052" +
    "\017\050\020\062\021\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\074\026\075\027\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\107\026\075\027\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\101\001\001" +
    "\000\004\027\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\106\027\071\001\001\000\002\001\001" +
    "\000\006\026\105\027\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\116\022\113\023\114\026\075\027\071\031\115\001" +
    "\001\000\012\022\141\026\075\027\071\031\142\001\001" +
    "\000\004\030\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\121" +
    "\014\051\015\056\016\052\017\050\020\062\021\061\001" +
    "\001\000\016\014\063\015\056\016\052\017\050\020\062" +
    "\021\061\001\001\000\004\024\124\001\001\000\004\017" +
    "\126\001\001\000\002\001\001\000\020\013\127\014\051" +
    "\015\056\016\052\017\050\020\062\021\061\001\001\000" +
    "\002\001\001\000\016\014\063\015\056\016\052\017\050" +
    "\020\062\021\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\140\026\075\027\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\113\026\075\027\071" +
    "\031\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\113\026\075\027\071\031\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\155\026\075\027" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\160\026\075\027\071\001\001\000\002\001\001\000" +
    "\010\022\162\026\075\027\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\116\022\113\023\167\026\075\027\071\031\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\172\014\051\015\056\016\052\017\050\020\062\021\061" +
    "\001\001\000\016\014\063\015\056\016\052\017\050\020" +
    "\062\021\061\001\001\000\002\001\001\000\004\025\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*Mensaje de error*/
    public void syntax_error(Symbol s) {
      System.out.println("Error de sintaxis en linea " + s.right +
      ". Simbolo: " + s.value);
    }

    public boolean readTable(TablaSimbolos ts){
        try {
            ts.leerArchivo();  // Esto carga los símbolos existentes en la tabla
            return true;
        } catch (IOException e) {
            System.out.println("Error al leer el archivo de símbolos: " + e.getMessage());
            return false;
        }
    }

    public void AddTypesTS(TablaSimbolos ts, List<String> tokenName, List<String> type){
        boolean err = false;
        for(int i = 0; i < tokenName.size(); i++){
            if(!ts.actualizarSimbolo(tokenName.get(i), type.get(i))){
                System.out.println("Error de actualizacion en la tabla de simbolos");
                err = true;
            }
        }
        ts.escribirArchivo(ts.getSymtabla(), false);
        if(!err) System.out.println("Actualizacion en la tabla de simbolos Correcta");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    // Tabla de simbolos del compilador
    TablaSimbolos tabla = new TablaSimbolos("ts.txt");
    // Lista que va a almacenar todos los ids que se declaren en la seccion de declaracion
    List<String> listIDs = new ArrayList<>();
    // Lista que va a almacenar los ids de cada linea de la seccion de declaracion
    // Se va a limpiar cada vez que termine la declaracion
    List<String> invertList = new ArrayList<>();
    // Lista que va a almacenar los tipos de cada linea de la seccion de declaracion
    List<String> listTypes = new ArrayList();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgr ::= declaraciones programa 
            {
              Object RESULT =null;
		
                System.out.println("[Regla 0] Compilacion exitosa llegando al simbolo Start: Se detectaron declaraciones y programa.");
                // Se lee la tabla que se creo en la seccion lexica del compilador
                if(readTable(tabla)){
                    // Se le agregan los tipos que se leyeron a todos los ids
                    AddTypesTS(tabla, listIDs, listTypes);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pgr ::= sentencias_print 
            {
              Object RESULT =null;
		 System.out.println("[Regla 1] Compilacion exitosa llegando al simbolo Start: Se detectaron solo sentencias de impresión."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias_print ::= lista_print 
            {
              Object RESULT =null;
		 System.out.println("[Regla 2] Sector sentencias para imprimir detectado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_print",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_print ::= lista_print print DOTCOM 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_print ::= print DOTCOM 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // print ::= OP_WRITE CTE_STR 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 5] PRINT encontrado: " + str); RESULT = str; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= OP_DECSEC declare OP_ENDECSEC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 6] Sector DECLARACION detectado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declare ::= declare SQR_OP variable_tipos SQR_CL DOTCOM 
            {
              Object RESULT =null;
		
                // Se invierte la lista auxiliar con los ids actuales
                Collections.reverse(invertList);
                // Se concatena la lista auxiliar a la lista donde se van a almacenar todos los ids
                listIDs.addAll(invertList);
                // Se vacia la lista auxiliar para volver a empezar si hay otra sentencia de declaracion
                invertList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declare ::= SQR_OP variable_tipos SQR_CL DOTCOM 
            {
              Object RESULT =null;
		
                // Se invierte la lista auxiliar con los ids actuales
                Collections.reverse(invertList);
                // Se concatena la lista auxiliar a la lista donde se van a almacenar todos los ids
                listIDs.addAll(invertList);
                // Se vacia la lista auxiliar para volver a empezar si hay otra sentencia de declaracion
                invertList.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_tipos ::= ID COMA variable_tipos COMA tipos 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.println("[Regla 9] ID encontrado: " + id);
                    RESULT = id;
                    // Se agrega el id encontrado en la lista auxiliar de ids
                    invertList.add(id.toString());
                    // Se agrega el tipo encontrado en la lista de tipos
                    listTypes.add(t.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_tipos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_tipos ::= ID SQR_CL DECLA SQR_OP tipos 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.println("[Regla 10] ID encontrado: " + id);
                    RESULT = id;
                    // Se agrega el id encontrado en la lista auxiliar de ids
                    invertList.add(id.toString());
                    // Se agrega el tipo encontrado en la lista de tipos
                    listTypes.add(t.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_tipos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipos ::= OP_INT 
            {
              Object RESULT =null;
		int ointleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ointright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oint = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 11] Tipo INT encontrado: " + oint); RESULT = oint; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipos ::= OP_FLOAT 
            {
              Object RESULT =null;
		int ofloatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ofloatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ofloat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 12] Tipo FLOAT encontrado: " + ofloat); RESULT = ofloat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipos ::= OP_STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 13] Tipo STR encontrado: " + str); RESULT = str; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // programa ::= OP_PROSEC lista OP_ENDPROSEC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 14] Sector PROGRAMA detectado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista ::= lista sentencia 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista ::= sentencia 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 17] Sentencia ASIGNACION detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= while 
            {
              Object RESULT =null;
		 System.out.println("[Regla 18] Sentencia WHILE detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= if 
            {
              Object RESULT =null;
		 System.out.println("[Regla 19] Sentencia IF detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= write 
            {
              Object RESULT =null;
		 System.out.println("[Regla 20] Sentencia WRITE detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= between 
            {
              Object RESULT =null;
		 System.out.println("[Regla 21] Sentencia BETWEEN detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion ::= ID ASIGN expresion DOTCOM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("[Regla 21] ID en asignacion: " + id); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // while ::= OP_WHILE PAR_OP condicion PAR_CL BRA_OP lista BRA_CL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if ::= OP_IF PAR_OP condicion PAR_CL BRA_OP lista BRA_CL else 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if ::= OP_IF PAR_OP condicion PAR_CL BRA_OP lista BRA_CL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // else ::= OP_ELSE BRA_OP lista BRA_CL 
            {
              Object RESULT =null;
		 System.out.println("[Regla 26] Sentencia ELSE detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // else ::= OP_ELSE if 
            {
              Object RESULT =null;
		 System.out.println("[Regla 27] Sentencia ELSE IF detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // write ::= OP_WRITE PAR_OP cte PAR_CL DOTCOM 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // between ::= OP_BETWEEN PAR_OP expresion COMA SQR_OP expresion DOTCOM expresion SQR_CL PAR_CL DOTCOM 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("between",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cte ::= CTE_INT 
            {
              Object RESULT =null;
		int cintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cintright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cint = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 30] Constante INT encontrada: " + cint); RESULT = cint; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cte ::= CTE_REAL 
            {
              Object RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 31] Constante REAL encontrada: " + real); RESULT = real; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cte ::= CTE_STR 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 32] Constante STR encontrada: " + str); RESULT = str; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cte ::= CTE_BIN 
            {
              Object RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 33] Constante BINARIA encontrada: " + bin); RESULT = bin; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion OP_SUM termino 
            {
              Object RESULT =null;
		 System.out.println("[Regla 34] EXPRESION + TERMINO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion OP_LESS termino 
            {
              Object RESULT =null;
		 System.out.println("[Regla 35] EXPRESION - TERMINO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= termino 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // termino ::= termino OP_MUL factor 
            {
              Object RESULT =null;
		 System.out.println("[Regla 37] TERMINO * FACTOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		 System.out.println("[Regla 38] TERMINO / FACTOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termino ::= factor 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= PAR_OP expresion PAR_CL 
            {
              Object RESULT =null;
		 System.out.println("[Regla 40] FACTOR "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= CTE_BIN 
            {
              Object RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 41] CTE BIN encontrada: " + bin); RESULT = bin; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= CTE_INT 
            {
              Object RESULT =null;
		int cintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cintright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cint = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 42] CTE INT encontrada: " + cint); RESULT = cint; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= CTE_REAL 
            {
              Object RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 43] CTE REAL encontrada: " + real); RESULT = real; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 44] ID encontrado: " + id); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion_logica ::= expresion comparacion expresion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_logica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= PAR_OP condicion_logica PAR_CL AND PAR_OP condicion_logica PAR_CL 
            {
              Object RESULT =null;
		 System.out.println("[Regla 46] CONDICION AND detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= PAR_OP condicion_logica PAR_CL OR PAR_OP condicion_logica PAR_CL 
            {
              Object RESULT =null;
		 System.out.println("[Regla 47] CONDICION OR detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= condicion_logica 
            {
              Object RESULT =null;
		 System.out.println("[Regla 48] CONDICION LOGICA detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= between 
            {
              Object RESULT =null;
		 System.out.println("[Regla 49] CONDICION BETWEEN detectada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comparacion ::= EQ 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 50] Comparador IGUAL encontrado: " + eq); RESULT = eq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comparacion ::= NEQ 
            {
              Object RESULT =null;
		int neqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int neqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object neq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 51] Comparador NO IGUAL encontrado: " + neq); RESULT = neq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comparacion ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 52] Comparador MENOR QUE encontrado: " + minus); RESULT = minus; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparacion ::= MAY 
            {
              Object RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object may = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 53] Comparador MAYOR QUE encontrado: " + may); RESULT = may; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comparacion ::= MINUS_EQ 
            {
              Object RESULT =null;
		int minus_eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minus_eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object minus_eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 54] Comparador MENOR O IGUAL encontrado: " + minus_eq); RESULT = minus_eq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparacion ::= MAY_EQ 
            {
              Object RESULT =null;
		int may_eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int may_eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object may_eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 55] Comparador MAYOR O IGUAL encontrado: " + may_eq); RESULT = may_eq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
